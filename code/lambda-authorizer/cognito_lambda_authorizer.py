from jose import jwt, jws, jwk
import requests
import json
import time
from jose.utils import base64url_decode
import os

# /***************************************************************************************
#  * Decoding and verifying user ID Token  generated by Cognito *
#  * Adapted from :  Git - AWS Lambda cognito authorizer *
#  * Modified it : to verify the token issuer as per the amazon docs link given below and *
#  * Modified it : to verify cognito group of the user for role based access  *
#  * Availability: https://github.com/Senzing/aws-lambda-cognito-authorizer/blob/main/cognito_authorizer.py *
#  * Accessed: 11th April, 2023
#  * **************************************************************************************/

# /***************************************************************************************
#  * Verifying a JSON web token
#  * Referred from :  Verifying a JSON web token - Amazon Cognito *
#  * Availability: https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-using-tokens-verifying-a-jwt.html *
#  * Accessed: 11th April, 2023
#  * **************************************************************************************/

def handler(event, context):

    print(event)

    userPoolRegion = os.environ['COGNITO_USER_POOL_REGION']
    userPoolId = os.environ['COGNITO_USER_POOL_ID']
    app_client_id = os.environ['COGNITO_USER_POOL_APP_CLIENT_ID']

    tokenIssuer = 'https://cognito-idp.{}.amazonaws.com/{}'.format(userPoolRegion, userPoolId)
    authorizationToken = event['headers']['Authorization']


    deny_policy = {
        "principalId": authorizationToken,
        "policyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                "Action": "execute-api:Invoke",
                "Effect": "Deny",
                "Resource": "*"
                }
            ]
        }
    }
    cognito_userpool_keys_url = tokenIssuer + "/.well-known/jwks.json"
    cognito_userpool_keys_response = requests.get(cognito_userpool_keys_url).json()

    userpool_keys = cognito_userpool_keys_response["keys"]

    unverified_header = jwt.get_unverified_header(authorizationToken)
    kid = unverified_header["kid"]

    matching_keys = []
    for user_pool_key in userpool_keys:
        if user_pool_key["kid"] == kid:
            matching_keys.append(user_pool_key)

    if len(matching_keys) != 1:
        print("Obtained keys are wrong")
        return deny_policy

    matching_key = matching_keys[0]
    matching_key_jwk = jwk.construct(matching_key)

    message, encoded_signature = str(authorizationToken).rsplit('.', 1)
    decoded_signature = base64url_decode(encoded_signature.encode('utf-8'))

    if not matching_key_jwk.verify(message.encode("utf8"), decoded_signature):
        print("Signature verification failed")
        return deny_policy
    print("Signature verified successfully")

    token_claims = jwt.get_unverified_claims(authorizationToken)
    print(token_claims)
    if time.time() > token_claims['exp']:
        print("Token is expired")
        return deny_policy

    if token_claims['aud'] != app_client_id:
        print("Token belongs to different client")
        return deny_policy

    if token_claims['iss'] != tokenIssuer:
        print("Token issued from different issuer")
        return deny_policy

    if(event['path'].startswith('/admin/')):
        if(os.environ['COGNITO_ADMIN_GROUP_NAME'] not in token_claims['cognito:groups']):
            print("api is not authorized for customer access")
            return deny_policy

    print('token is valid!')
    print(token_claims)

    allow_policy = {
        "principalId": authorizationToken,
        "policyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                "Action": "execute-api:Invoke",
                "Effect": "Allow",
                "Resource": "*"
                }
            ]
        },
        "context" : {
            "authorizationToken" : authorizationToken,
            "email" : token_claims['email'],
            "sub" : token_claims['sub'],
#             "preferred_username" : token_claims['preferred_username'],
            "cognito-groups" : json.dumps(token_claims["cognito:groups"])
        }
    }
    print(allow_policy)
    return allow_policy